import React from 'react';
import ShareTrip from './ShareTrip';
import { Button } from '@/components/ui/button';
import { FiTrash2, FiDownload, FiPrinter } from 'react-icons/fi';
import { doc, deleteDoc } from 'firebase/firestore';
import { db } from '@/service/firebaseConfig';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

function InfoSection({ trip }) {
  // Extract photoUrl from trip data with a fallback
  const photoUrl = trip?.userSelection?.location?.photoUrl || 'https://images.unsplash.com/photo-1500835556837-99ac94a94552';
  const navigate = useNavigate();
  
  // Extract destination name for the title
  const getDestinationName = () => {
    if (trip?.userSelection?.location?.display_name) {
      // If location has display_name property (from LocationSearch)
      const fullDestination = trip.userSelection.location.display_name;
      return fullDestination.includes(',') 
          ? fullDestination.split(',')[0].trim() 
          : fullDestination;
    } else if (trip?.userSelection?.location?.label) {
      // Fallback to label if display_name is not available
      const fullDestination = trip.userSelection.location.label;
      return fullDestination.includes(',') 
          ? fullDestination.split(',')[0].trim() 
          : fullDestination;
    }
    return "Your Trip";
  };
  
  const handleDeleteTrip = async () => {
    if (!trip?.id) return;
    
    if (confirm('Are you sure you want to delete this trip? This action cannot be undone.')) {
      try {
        const tripRef = doc(db, 'AITrips', trip.id);
        await deleteDoc(tripRef);
        toast.success('Trip deleted successfully!');
        navigate('/'); // Navigate to home page after deletion
      } catch (error) {
        console.error('Error deleting trip:', error);
        toast.error('Failed to delete trip. Please try again.');
      }
    }
  };
  
  // New function to export trip details as PDF
  const handleExportPDF = () => {
    if (!trip?.id) {
      toast.error('Trip data not available for export');
      return;
    }
    
    // Prepare for print
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      toast.error('Please allow pop-ups to export trip details');
      return;
    }
    
    // Use the same destination name function for consistency
    const destinationName = getDestinationName();
    
    // Create content for the print window
    const tripDays = trip?.userSelection?.noOfDays || 'N/A';
    const tripBudget = trip?.userSelection?.budget || 'N/A';
    const tripTravelers = trip?.userSelection?.traveler || 'N/A';
    
    // Generate itinerary HTML
    let itineraryHTML = '';
    if (trip?.tripData?.itinerary) {
      itineraryHTML = '<h2 style="margin-top: 20px; font-size: 18px; font-weight: bold;">Itinerary</h2>';
      trip.tripData.itinerary.forEach(day => {
        itineraryHTML += `<h3 style="margin-top: 15px; font-size: 16px; font-weight: bold;">${day.day}</h3>`;
        itineraryHTML += '<ul style="list-style-type: disc; margin-left: 20px;">';
        day.plan.forEach(item => {
          itineraryHTML += `<li><strong>${item.time}</strong>: ${item.place} - ${item.description}</li>`;
        });
        itineraryHTML += '</ul>';
      });
    }
    
    // Create HTML content
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Trip to ${destinationName}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .header { text-align: center; margin-bottom: 20px; }
          .trip-details { margin-bottom: 20px; }
          .detail-item { margin-bottom: 10px; }
          @media print {
            .no-print { display: none; }
            button { display: none; }
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Trip to ${destinationName}</h1>
          <p>Generated by ShohojTravel Planner</p>
        </div>
        
        <div class="trip-details">
          <h2>Trip Details</h2>
          <div class="detail-item"><strong>Destination:</strong> ${trip?.userSelection?.location?.label || destinationName}</div>
          <div class="detail-item"><strong>Duration:</strong> ${tripDays} days</div>
          <div class="detail-item"><strong>Budget Level:</strong> ${tripBudget}</div>
          <div class="detail-item"><strong>Number of Travelers:</strong> ${tripTravelers}</div>
        </div>
        
        ${itineraryHTML}
        
        <div class="no-print" style="margin-top: 30px; text-align: center;">
          <button onclick="window.print();" style="padding: 10px 20px; background: #0070f3; color: white; border: none; border-radius: 5px; cursor: pointer;">Print this page</button>
        </div>
      </body>
      </html>
    `;
    
    printWindow.document.open();
    printWindow.document.write(htmlContent);
    printWindow.document.close();
    
    toast.success('Trip details ready for export');
  };
  
  return (
    <div className="mb-10">
      {/* Add prominent trip title at the top */}
      <div className="mb-6 text-center">
        <h1 className="text-3xl md:text-4xl font-bold text-primary">
          {getDestinationName()} Trip
        </h1>
        <p className="text-gray-500 mt-2">
          {trip?.userSelection?.noOfDays ? `${trip.userSelection.noOfDays} days` : ''} 
          {trip?.userSelection?.traveler ? ` â€¢ ${trip.userSelection.traveler} traveler${trip.userSelection.traveler > 1 ? 's' : ''}` : ''}
          {trip?.userSelection?.budget ? ` â€¢ ${trip.userSelection.budget.charAt(0).toUpperCase() + trip.userSelection.budget.slice(1)} budget` : ''}
        </p>
      </div>
      
      <img
        src={photoUrl}
        alt="Trip Location"
        className="h-[340px] w-full object-cover rounded-xl"
      />
      <div>
        <div className="my-5 flex flex-col gap-2">
          <h2 className="font-bold text-2xl">{trip?.userSelection?.location?.label}</h2>
          <div className="flex gap-5">
            <h2 className="p-1 px-3 bg-gray-200 rounded-full text-gray-500 text-xs md:text-md">
              ðŸ“… {trip.userSelection?.noOfDays} Day
            </h2>
            <h2 className="p-1 px-3 bg-gray-200 rounded-full text-gray-500 text-xs md:text-md">
              ðŸ’° {trip.userSelection?.budget} Budget
            </h2>
            <h2 className="p-1 px-3 bg-gray-200 rounded-full text-gray-500 text-xs md:text-md">
              ðŸ‘¥ No. of traveler/s: {trip.userSelection?.traveler}
            </h2>
          </div>
        </div>
      </div>
      
      <div className="flex flex-wrap justify-between items-center gap-2">
        {/* Add the ShareTrip component */}
        <ShareTrip trip={trip} />
        
        <div className="flex gap-2">
          {/* Add Export PDF button */}
          <Button 
            variant="outline" 
            onClick={handleExportPDF}
            className="flex items-center gap-1 text-blue-500 hover:bg-blue-50"
          >
            <FiDownload /> Export PDF
          </Button>
          
          {/* Add Delete Trip button */}
          <Button 
            variant="outline" 
            onClick={handleDeleteTrip}
            className="flex items-center gap-1 text-red-500 hover:bg-red-50"
          >
            <FiTrash2 /> Delete Trip
          </Button>
        </div>
      </div>
    </div>
  );
}

export default InfoSection;
